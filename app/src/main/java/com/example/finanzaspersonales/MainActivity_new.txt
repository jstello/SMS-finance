data class SmsMessage(
    val address: String,
    val body: String,
    val amount: String?,
    val numericAmount: Float?,
    val dateTime: java.util.Date?,
    val detectedAccount: String? = null,
    val sourceAccount: String? = null
)

data class TransactionData(
    val date: java.util.Date,
    val amount: Float,
    val isIncome: Boolean,
    val originalMessage: SmsMessage
)

private fun extractAmountFromBody(body: String): String? {
    val pattern = Pattern.compile("""(\$|COP)\s*((\d{1,3}(?:[.,]\d{3})*|\d+))(?:([.,])(\d{2}))?""")
    val matcher = pattern.matcher(body)
    return if (matcher.find()) {
        val currency = matcher.group(1)
        val mainNumber = matcher.group(2).replace("[.,]".toRegex(), "")
        val decimal = matcher.group(5)
        
        when {
            decimal == null -> "$currency$mainNumber"
            decimal == "00" -> "$currency$mainNumber"
            else -> "$currency$mainNumber.$decimal"
        }
    } else null
}

private fun extractTransactionData(messages: List<SmsMessage>): List<TransactionData> {
    return messages.mapNotNull { message ->
        if (message.dateTime != null && message.numericAmount != null) {
            TransactionData(
                date = message.dateTime,
                amount = message.numericAmount,
                isIncome = message.body.contains(
                    Regex("(recepci[óo]n|recibiste|n[óo]mina)", RegexOption.IGNORE_CASE)
                ),
                originalMessage = message
            )
        } else null
    }
}

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun MessageDetailScreen(
    message: SmsMessage, 
    onBack: () -> Unit
) {
    // ... keep the enhanced version with account detection ...
}

class MainActivity : ComponentActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        // ... keep the enhanced version with dark theme ...
    }
}

@Composable
fun SMSReader(modifier: Modifier = Modifier) {
    // ... keep the enhanced version with navigation bar ...
}

@Composable
fun NumericDataScreen(
    transactions: List<TransactionData>,
    onBack: () -> Unit,
    filterState: androidx.compose.runtime.MutableState<String>,
    selectedYear: androidx.compose.runtime.MutableState<Int?>,
    selectedMonth: androidx.compose.runtime.MutableState<Int?>,
    sortState: androidx.compose.runtime.MutableState<Pair<String, Boolean>>
) {
    // ... keep the enhanced version ...
} 